package builder

import (
	"fmt"
	"os"

	"github.com/dave/jennifer/jen"
	"github.com/evilmonkeyinc/openapi-go-gen/pkg/builder/components"
	"github.com/getkin/kin-openapi/openapi3"
)

func WriteSchemaFile(output, module, componentName string, schemaRef *openapi3.SchemaRef) error {
	file := jen.NewFile("schemas")
	file.HeaderComment("// Code generated by github.com/evilmonkeyinc/openapi-go-gen. DO NOT EDIT.")

	schemaBuilder := components.NewSchemaBuilder(module, "schemas", "", schemaRef, true)
	main, extra, err := schemaBuilder.AsStruct(componentName)
	if err != nil {
		return err
	}
	file.Add(extra...)
	file.Add(main)

	fileWritter, err := os.Create(fmt.Sprintf("%s/schemas/%s.go", output, componentName))
	if err != nil {
		return err
	}
	defer fileWritter.Close()

	return file.Render(fileWritter)
}

func WriteResponseFile(output, module, componentName string, responseRef *openapi3.ResponseRef) error {
	file := jen.NewFile("responses")
	file.HeaderComment("// Code generated by github.com/evilmonkeyinc/openapi-go-gen. DO NOT EDIT.")

	responseBuilder := components.NewResponseBuilder(module, "responses", "", responseRef)
	main, extra, err := responseBuilder.AsStruct(componentName)
	if err != nil {
		return err
	}
	file.Add(extra...)
	file.Add(main)

	fileWritter, err := os.Create(fmt.Sprintf("%s/responses/%s.go", output, componentName))
	if err != nil {
		return err
	}
	defer fileWritter.Close()

	return file.Render(fileWritter)
}

func WriteParameterFile(output, module, componentName string, responseRef *openapi3.ParameterRef) error {
	file := jen.NewFile("parameters")
	file.HeaderComment("// Code generated by github.com/evilmonkeyinc/openapi-go-gen. DO NOT EDIT.")

	responseBuilder := components.NewParameterBuilder(module, "parameters", "", responseRef, true)
	main, extra, err := responseBuilder.AsStruct(componentName)
	if err != nil {
		return err
	}
	file.Add(extra...)
	file.Add(main)

	fileWritter, err := os.Create(fmt.Sprintf("%s/parameters/%s.go", output, componentName))
	if err != nil {
		return err
	}
	defer fileWritter.Close()

	return file.Render(fileWritter)
}

func WriteOperationFiles(output, module string, specification *openapi3.Swagger) error {
	// moduleSplit := strings.Split(module, "/")
	// packageName := moduleSplit[len(moduleSplit)-1]

	operationsByTag := make(map[string][]*openapi3.Operation)

	paths := specification.Paths

	functions := make([]jen.Code, 0)
	for _, path := range paths {
		for _, operation := range path.Operations() {

			file := jen.NewFile("operations")
			file.HeaderComment("// Code generated by github.com/evilmonkeyinc/openapi-go-gen. DO NOT EDIT.")

			operations := operationsByTag[operation.Tags[0]]
			if operations == nil {
				operations = make([]*openapi3.Operation, 0)
			}
			operations = append(operations, operation)
			operationsByTag[operation.Tags[0]] = operations

			operationBuilder := NewOperationBuilder(module, "operations", operation, path.Parameters)
			function, err := operationBuilder.InterfaceField()
			if err != nil {
				return err
			}

			functions = append(functions, function)

			request, extras, err := operationBuilder.RequestStruct()
			if err != nil {
				return err
			}
			file.Add(request)
			file.Add(extras...)

			response, extras, err := operationBuilder.ResponseStruct()
			if err != nil {
				return err
			}
			file.Add(response)
			file.Add(extras...)

			fileWritter, err := os.Create(fmt.Sprintf("%s/operations/%s.go", output, operation.OperationID))
			if err != nil {
				return err
			}
			defer fileWritter.Close()

			if err := file.Render(fileWritter); err != nil {
				return err
			}
		}
	}

	return nil
}
