package components

import (
	"fmt"
	"html/template"
	"os"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

type structTag struct {
	Tag    string
	Values []string
}

type structField struct {
	openapi3.Schema
	FieldName string
	GoType    string
	Tags      []structTag
}

type schemaData struct {
	Package     string
	Title       string
	Description string
	Fields      []structField
}

func getPropertyType(schema *openapi3.SchemaRef) string {

	if schemaRef := schema.Ref; schemaRef != "" {
		split := strings.Split(schema.Ref, "/")
		return strings.Title(split[len(split)-1])
	} else if schemaValue := schema.Value; schemaValue != nil {
		switch schemaValue.Type {
		case "string":
			return "string"
		case "number":
			switch schemaValue.Format {
			case "double":
				return "float32"
			case "float":
				return "float64"
			}
			return "float64"
		case "integer":
			switch schemaValue.Format {
			case "int32":
				return "int32"
			case "int64":
				return "int64"
			}
			return "int64"
		case "boolean":
			return "bool"
		case "array":
			return fmt.Sprintf("[]%s", getPropertyType(schemaValue.Items))
		case "object":
			break
		}
	}

	fmt.Println("fall through", schema)
	return "interface{}"
}

func GenerateSchema(destination, fileName string, schema *openapi3.SchemaRef) error {
	writer, err := os.Create(fmt.Sprintf("%s/schemas/%s.go", destination, fileName))
	if err != nil {
		return err
	}
	defer writer.Close()

	data := &schemaData{}
	data.Title = strings.Title(fileName)
	data.Package = "components"

	if schemaValue := schema.Value; schemaValue != nil {
		if schemaValue.Title != "" {
			data.Title = schemaValue.Title
		}
		data.Description = schemaValue.Description

		fields := make([]structField, 0)
		for key, value := range schemaValue.Properties {
			if value.Value == nil {

			}

			fields = append(fields, structField{
				Schema:    *value.Value,
				FieldName: strings.Title(key),
				GoType:    getPropertyType(value),
			})
		}
		data.Fields = fields
	}

	t := template.New("")
	t.Parse(`// Code generated by github.com/evilmonkeyinc/openapi-go-gen. DO NOT EDIT.
package {{.Package}}

{{ if .Description -}}// {{.Description}}
{{end}}type {{ .Title }} struct {
	{{ if .Fields -}}
	{{range $v := .Fields}}{{ if $v.Description -}}// {{$v.Description}}
	{{end}}{{$v.FieldName}} {{$v.GoType}}
	{{end}}{{end}}
}
`)
	return t.Execute(writer, data)
}
